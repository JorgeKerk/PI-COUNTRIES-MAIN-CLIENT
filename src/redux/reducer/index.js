import  { 
  GET_ALL_COUNTRIES,  
  GET_ALL_ACTIVITIES,
  SET_CURRENT_PAGE, 
  SET_CURRENT_COUNTRIES,
  GET_COUNTRIES_BY_NAME,
  SET_FILTER_BY_CONTINENTS,
  SET_FILTER_BY_ACTIVITY,
  SET_ORDER, 
  SET_NEW_ACTIVITY,
  CREATE_ACTIVITY, 
  UPDATE_ACTIVITY,
  DELETE_ACTIVITY,
  SET_ERROR
} from '../actionsTypes'

// Function that filters and orders the countries according to 
// the attributes of the object 'CountriesfilTersettings' in the State
import applyFiltersInCountries from './functionsReducer'


const initialState = {
  // All countries initially brought from the DB through 'GET_ALL_COUNTRIES'
  allCountries: [],
  // All Activities with their array of Countries that have that Activity
  activities: [],
  // Selected page of the Pagination Component
  currentPageCountries: 0,
  // Countries that are shown on the screen according to the page selected in the Pagination Component
  currentCountries: [],
  // Filtered and ordered Countries according to the attributes of the object 'CountriesfilTersettings'
  countriesFilter: [],
  // Filtering and ordered of Countries configuration
  countriesFilterSettings: {
    name: '',
    continents: [],
    activity: 'All',
    order: [ 'name', 'ascending' ]
  },
  // Data from the new Activity to be created
  newActivity: {
    name: '',
    dificulty: 0,
    duration: 0,
    seasons: [],
    countriesIds: []
  },
  // Errors generated in the data entered when creating a new activity
  errorNewActivity: {
    name: '',
    dificulty: '',
    duration: '',
    seasons: '',
    countriesIds: ''
  },
  // Unexpected error, generally generated by access to DB
  error: ''
}

const rootReducer = ( state = initialState, { type, payload } )=> {

  switch( type ){
    // Load all the Countries obtained from the DB in the 'state' of the Redux
    case GET_ALL_COUNTRIES:{
      let newState = { ...state }
      newState.countriesFilter = payload
      newState = applyFiltersInCountries( '', newState, '' )

      return {
        ...state,
        ...newState,
        allCountries: payload.map( country => ( { ...country, selected: false } ) ),
      }
    }
    // Load all the Activities obtained from the DB in the 'state' of the Redux
    case GET_ALL_ACTIVITIES:
      return { 
        ...state,  
        activities: payload 
      } 
    // Save the selected page number in the Pagination Component
    case SET_CURRENT_PAGE:
      return { 
        ...state, 
        currentPageCountries: payload 
      }
    // Save the Countries to display on the screen according to the selected page number in the Pagination Component
    case SET_CURRENT_COUNTRIES:
      return { 
        ...state, 
        currentCountries: payload 
      }
    // Save the Countries filtered by 'name' obtained from the DB. 
    // Save the 'name' filter of the object 'CountriesfilTersettings' in the State
    case GET_COUNTRIES_BY_NAME:{
      let newState = { ...state }
      newState.countriesFilter = payload.name? payload.data : newState.allCountries
      newState = applyFiltersInCountries( '', newState, '' )

      return {
        ...state,
        ...newState,
        countriesFilterSettings: {
          ...newState.countriesFilterSettings,
          name: payload.name 
        }
      }
    }

    case SET_FILTER_BY_CONTINENTS:{
      return applyFiltersInCountries( 'continents', state, payload )
    }

    case SET_FILTER_BY_ACTIVITY:
      return applyFiltersInCountries( 'activity', state, payload )
        
    case SET_ORDER: 
      return applyFiltersInCountries( 'order', state, payload )
    // Loads the data of the new Activity that is being created and/or the error if there were
    case SET_NEW_ACTIVITY:
      return {
        ...state,
        newActivity: 
          { 
            ...state.newActivity, 
            [ payload.prop ]: payload.value 
          },
        errorNewActivity:
          {
            ...state.errorNewActivity,
            [ payload.prop ]: payload.error
          }
      }
    // Add the new Activity to the array of Activities and restart the corresponding attributes in the state
    case CREATE_ACTIVITY:
      return { 
        ...state,
        allCountries: state.allCountries.map( country => ( { ...country, selected: false } ) ),
        newActivity: { ...initialState.newActivity },
        errorNewActivity: { ...initialState.errorNewActivity },
        activities: [ ...state.activities, payload ]
      }
    // Update the Activity sent by payload in the Activities array of Redux
    case UPDATE_ACTIVITY:{
      let newState = { ...state }
      newState.activities = newState.activities.map( activity => activity.id === payload.id? payload : activity )
      newState = applyFiltersInCountries( 'activity', newState, payload.name )

      return { 
        ...state,
        ...newState
      }
    }
    // Delete the Activity with the ID sent by payload in the Activities array of Redux
    case DELETE_ACTIVITY: {
      let newState = { ...state }
      newState.activities = newState.activities.filter( activity => activity.id !== payload )
      newState = applyFiltersInCountries( 'activity', newState, 'All' )

      return { 
        ...state,
        ...newState
      }
    }
    // Save the error generated (usually by an order to the DB)
    // Restart the corresponding attributes in the state
    case SET_ERROR:
      return {
        ...state,
        countriesFilter: [],
        currentCountries: [],
        error: payload
      }

    default:
      return { 
        ...state 
      }
    }
}

export default rootReducer